# Generated by Django 5.0.12 on 2025-07-26 07:32

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('lets_go', '0002_alter_usersdata_cnic_no_alter_usersdata_gender_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='usersdata',
            name='phone_no',
            field=models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(message='Phone number must be in international format, e.g. +923001234567', regex='^\\+\\d{10,15}$')]),
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_id', models.CharField(help_text='Unique route identifier like R001', max_length=50, unique=True)),
                ('route_name', models.CharField(help_text='Display name for the route', max_length=100)),
                ('route_description', models.TextField(blank=True, help_text='Detailed description of the route', null=True)),
                ('total_distance_km', models.DecimalField(blank=True, decimal_places=2, help_text='Total route distance in kilometers', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('estimated_duration_minutes', models.IntegerField(blank=True, help_text='Estimated travel time in minutes', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this route is available for booking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['route_name'],
                'indexes': [models.Index(fields=['route_id'], name='lets_go_rou_route_i_61a28f_idx'), models.Index(fields=['is_active'], name='lets_go_rou_is_acti_c7426a_idx'), models.Index(fields=['created_at'], name='lets_go_rou_created_8e4eb3_idx')],
            },
        ),
        migrations.CreateModel(
            name='RouteStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stop_name', models.CharField(help_text='Name of the stop', max_length=100)),
                ('stop_order', models.IntegerField(help_text='Order of this stop in the route (1, 2, 3, ...)', validators=[django.core.validators.MinValueValidator(1)])),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='GPS latitude coordinate', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='GPS longitude coordinate', max_digits=11, null=True)),
                ('address', models.TextField(blank=True, help_text='Full address of the stop', null=True)),
                ('estimated_time_from_start', models.IntegerField(blank=True, help_text='Estimated minutes from route start to this stop', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this stop is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_stops', to='lets_go.route')),
            ],
            options={
                'ordering': ['route', 'stop_order'],
            },
        ),
        migrations.CreateModel(
            name='FareMatrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_km', models.DecimalField(decimal_places=2, help_text='Distance between stops in kilometers', max_digits=8, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('base_fare', models.DecimalField(decimal_places=2, help_text='Standard fare for this route segment', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('peak_fare', models.DecimalField(decimal_places=2, help_text='Fare during peak hours (rush hour)', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('off_peak_fare', models.DecimalField(decimal_places=2, help_text='Fare during off-peak hours', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this fare is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fare_matrix', to='lets_go.route')),
                ('from_stop', models.ForeignKey(help_text='Pickup stop', on_delete=django.db.models.deletion.CASCADE, related_name='fare_from', to='lets_go.routestop')),
                ('to_stop', models.ForeignKey(help_text='Drop-off stop', on_delete=django.db.models.deletion.CASCADE, related_name='fare_to', to='lets_go.routestop')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_id', models.CharField(help_text='Unique booking identifier like B001-2024-01-15-08:00-001', max_length=50, unique=True)),
                ('number_of_seats', models.IntegerField(default=1, help_text='Number of seats booked', validators=[django.core.validators.MinValueValidator(1)])),
                ('seat_numbers', models.JSONField(default=list, help_text='Array of seat numbers booked')),
                ('total_fare', models.DecimalField(decimal_places=2, help_text='Total fare for all seats', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('fare_breakdown', models.JSONField(blank=True, default=dict, help_text='Detailed breakdown of fare calculation')),
                ('booking_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='CONFIRMED', max_length=20)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='PENDING', max_length=20)),
                ('passenger_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Passenger rating (1.0 to 5.0)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('passenger_feedback', models.TextField(blank=True, help_text='Passenger feedback about the trip', null=True)),
                ('booked_at', models.DateTimeField(auto_now_add=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('passenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passenger_bookings', to='lets_go.usersdata')),
                ('from_stop', models.ForeignKey(help_text='Pickup stop', on_delete=django.db.models.deletion.CASCADE, related_name='bookings_from', to='lets_go.routestop')),
                ('to_stop', models.ForeignKey(help_text='Drop-off stop', on_delete=django.db.models.deletion.CASCADE, related_name='bookings_to', to='lets_go.routestop')),
            ],
            options={
                'ordering': ['-booked_at'],
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_id', models.CharField(help_text='Unique trip identifier like T001-2024-01-15-08:00', max_length=50, unique=True)),
                ('trip_date', models.DateField(help_text='Date of the trip')),
                ('departure_time', models.TimeField(help_text='Scheduled departure time')),
                ('estimated_arrival_time', models.TimeField(help_text='Expected arrival time')),
                ('actual_departure_time', models.TimeField(blank=True, help_text='Actual departure time', null=True)),
                ('actual_arrival_time', models.TimeField(blank=True, help_text='Actual arrival time', null=True)),
                ('trip_status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20)),
                ('total_seats', models.IntegerField(help_text='Total number of seats available', validators=[django.core.validators.MinValueValidator(1)])),
                ('available_seats', models.IntegerField(help_text='Number of seats still available', validators=[django.core.validators.MinValueValidator(0)])),
                ('base_fare', models.DecimalField(decimal_places=2, help_text='Base fare for this trip', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the trip', null=True)),
                ('cancellation_reason', models.CharField(blank=True, help_text='Reason for cancellation if applicable', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driver_trips', to='lets_go.usersdata')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='lets_go.route')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lets_go.vehicle')),
            ],
            options={
                'ordering': ['trip_date', 'departure_time'],
            },
        ),
        migrations.CreateModel(
            name='SeatAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_number', models.IntegerField(help_text='Seat number (1, 2, 3, etc.)', validators=[django.core.validators.MinValueValidator(1)])),
                ('passenger_name', models.CharField(help_text='Passenger name (for display to other passengers)', max_length=100)),
                ('passenger_phone', models.CharField(blank=True, help_text='Masked phone number (last 4 digits only)', max_length=16, null=True)),
                ('passenger_gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], help_text='Passenger gender (for seat preferences)', max_length=10, null=True)),
                ('is_occupied', models.BooleanField(default=False, help_text='Has passenger boarded?')),
                ('occupied_at', models.DateTimeField(blank=True, help_text='When passenger boarded', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seat_assignments', to='lets_go.booking')),
                ('passenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seat_assignments', to='lets_go.usersdata')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seat_assignments', to='lets_go.trip')),
            ],
            options={
                'ordering': ['trip', 'seat_number'],
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='trip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_bookings', to='lets_go.trip'),
        ),
        migrations.CreateModel(
            name='TripChatGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(help_text='Name of the chat group', max_length=100)),
                ('group_description', models.TextField(blank=True, help_text='Description of the chat group', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this chat group is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(help_text='Driver who created the chat group', on_delete=django.db.models.deletion.CASCADE, related_name='created_chat_groups', to='lets_go.usersdata')),
                ('trip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat_group', to='lets_go.trip')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('TEXT', 'Text'), ('IMAGE', 'Image'), ('LOCATION', 'Location'), ('SYSTEM', 'System')], default='TEXT', help_text='Type of message', max_length=20)),
                ('message_text', models.TextField(help_text='Message content')),
                ('message_data', models.JSONField(blank=True, default=dict, help_text='Additional data for images, locations, etc.')),
                ('is_edited', models.BooleanField(default=False, help_text='Whether message has been edited')),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether message has been deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted the message', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_messages', to='lets_go.usersdata')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='lets_go.usersdata')),
                ('chat_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='lets_go.tripchatgroup')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatGroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_type', models.CharField(choices=[('DRIVER', 'Driver'), ('PASSENGER', 'Passenger')], help_text='Type of member (driver or passenger)', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether member is currently active')),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Whether to receive notifications')),
                ('mute_until', models.DateTimeField(blank=True, help_text='Mute notifications until this time', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_group_memberships', to='lets_go.usersdata')),
                ('last_read_message', models.ForeignKey(blank=True, help_text='Last message read by this member', null=True, on_delete=django.db.models.deletion.SET_NULL, to='lets_go.chatmessage')),
                ('chat_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_members', to='lets_go.tripchatgroup')),
            ],
        ),
        migrations.CreateModel(
            name='TripPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Card'), ('WALLET', 'Wallet'), ('BANK_TRANSFER', 'Bank Transfer'), ('MOBILE_MONEY', 'Mobile Money')], help_text='Method used for payment', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('transaction_id', models.CharField(blank=True, help_text='External transaction ID from payment gateway', max_length=100, null=True, unique=True)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('payment_gateway', models.CharField(blank=True, help_text='Payment gateway used (e.g., Stripe, PayPal)', max_length=50, null=True)),
                ('gateway_response', models.JSONField(blank=True, default=dict, help_text='Response from payment gateway')),
                ('currency', models.CharField(default='USD', help_text='Payment currency (USD, PKR, etc.)', max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=6, default=1.0, help_text='Exchange rate if different from base currency', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('refunded_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional payment notes', null=True)),
                ('receipt_url', models.URLField(blank=True, help_text='URL to payment receipt', null=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='lets_go.booking')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRefund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refund_amount', models.DecimalField(decimal_places=2, help_text='Amount to be refunded', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('refund_reason', models.CharField(choices=[('TRIP_CANCELLED', 'Trip Cancelled'), ('PASSENGER_REQUEST', 'Passenger Request'), ('DUPLICATE_PAYMENT', 'Duplicate Payment'), ('TECHNICAL_ISSUE', 'Technical Issue'), ('OTHER', 'Other')], help_text='Reason for refund', max_length=20)),
                ('refund_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSED', 'Processed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('refund_method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Card'), ('WALLET', 'Wallet'), ('BANK_TRANSFER', 'Bank Transfer'), ('MOBILE_MONEY', 'Mobile Money')], help_text='Method used for refund', max_length=20)),
                ('refund_transaction_id', models.CharField(blank=True, help_text='External refund transaction ID', max_length=100, null=True)),
                ('gateway_response', models.JSONField(blank=True, default=dict, help_text='Response from payment gateway for refund')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional refund notes', null=True)),
                ('requested_by', models.ForeignKey(blank=True, help_text='User who requested the refund', null=True, on_delete=django.db.models.deletion.SET_NULL, to='lets_go.usersdata')),
                ('original_payment', models.ForeignKey(help_text='Original payment being refunded', on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='lets_go.trippayment')),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='TripVehicleHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(help_text='Type of vehicle (BUS, SHUTTLE, etc.)', max_length=50)),
                ('vehicle_model', models.CharField(help_text='Model of the vehicle', max_length=100)),
                ('vehicle_make', models.CharField(help_text='Make of the vehicle', max_length=100)),
                ('vehicle_year', models.IntegerField(blank=True, help_text='Year of manufacture', null=True)),
                ('vehicle_color', models.CharField(blank=True, help_text='Color of the vehicle', max_length=50, null=True)),
                ('license_plate', models.CharField(help_text='License plate number', max_length=20)),
                ('vehicle_capacity', models.IntegerField(help_text='Maximum capacity of the vehicle')),
                ('vehicle_features', models.JSONField(blank=True, default=dict, help_text='Additional features like AC, WiFi, etc.')),
                ('vehicle_photo_url', models.URLField(blank=True, help_text='URL to vehicle photo', null=True)),
                ('fuel_type', models.CharField(blank=True, help_text='Type of fuel used', max_length=20, null=True)),
                ('engine_number', models.CharField(blank=True, help_text='Engine number', max_length=50, null=True)),
                ('chassis_number', models.CharField(blank=True, help_text='Chassis number', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_history', to='lets_go.trip')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lets_go.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='MessageReadStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_read_status', to='lets_go.chatmessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_messages', to='lets_go.usersdata')),
            ],
            options={
                'indexes': [models.Index(fields=['message'], name='lets_go_mes_message_6c6cfd_idx'), models.Index(fields=['user'], name='lets_go_mes_user_id_74c03d_idx'), models.Index(fields=['read_at'], name='lets_go_mes_read_at_b4af7b_idx')],
                'unique_together': {('message', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(fields=['route', 'stop_order'], name='lets_go_rou_route_i_3ced75_idx'),
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(fields=['is_active'], name='lets_go_rou_is_acti_129e48_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='routestop',
            unique_together={('route', 'stop_order')},
        ),
        migrations.AddIndex(
            model_name='farematrix',
            index=models.Index(fields=['route'], name='lets_go_far_route_i_c17e67_idx'),
        ),
        migrations.AddIndex(
            model_name='farematrix',
            index=models.Index(fields=['from_stop'], name='lets_go_far_from_st_7bb4fc_idx'),
        ),
        migrations.AddIndex(
            model_name='farematrix',
            index=models.Index(fields=['to_stop'], name='lets_go_far_to_stop_1f40f9_idx'),
        ),
        migrations.AddIndex(
            model_name='farematrix',
            index=models.Index(fields=['is_active'], name='lets_go_far_is_acti_626023_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='farematrix',
            unique_together={('route', 'from_stop', 'to_stop')},
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['trip_date'], name='lets_go_tri_trip_da_f74dd6_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['departure_time'], name='lets_go_tri_departu_08c46c_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['trip_status'], name='lets_go_tri_trip_st_38af0f_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['route', 'trip_date'], name='lets_go_tri_route_i_ea766e_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['driver'], name='lets_go_tri_driver__4599ed_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['vehicle'], name='lets_go_tri_vehicle_4f62c6_idx'),
        ),
        migrations.AddIndex(
            model_name='seatassignment',
            index=models.Index(fields=['trip'], name='lets_go_sea_trip_id_183510_idx'),
        ),
        migrations.AddIndex(
            model_name='seatassignment',
            index=models.Index(fields=['booking'], name='lets_go_sea_booking_1e7f44_idx'),
        ),
        migrations.AddIndex(
            model_name='seatassignment',
            index=models.Index(fields=['passenger'], name='lets_go_sea_passeng_9c7917_idx'),
        ),
        migrations.AddIndex(
            model_name='seatassignment',
            index=models.Index(fields=['is_occupied'], name='lets_go_sea_is_occu_152040_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seatassignment',
            unique_together={('trip', 'seat_number')},
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['trip'], name='lets_go_boo_trip_id_57d89f_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['passenger'], name='lets_go_boo_passeng_fbfc4e_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_status'], name='lets_go_boo_booking_be0bcb_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['payment_status'], name='lets_go_boo_payment_c38ff2_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booked_at'], name='lets_go_boo_booked__b8946c_idx'),
        ),
        migrations.AddIndex(
            model_name='tripchatgroup',
            index=models.Index(fields=['trip'], name='lets_go_tri_trip_id_5eb001_idx'),
        ),
        migrations.AddIndex(
            model_name='tripchatgroup',
            index=models.Index(fields=['is_active'], name='lets_go_tri_is_acti_885d56_idx'),
        ),
        migrations.AddIndex(
            model_name='tripchatgroup',
            index=models.Index(fields=['created_at'], name='lets_go_tri_created_a60dad_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['chat_group'], name='lets_go_cha_chat_gr_ecdb04_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender'], name='lets_go_cha_sender__a35e86_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['created_at'], name='lets_go_cha_created_1301b6_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['message_type'], name='lets_go_cha_message_9ed9f2_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['is_deleted'], name='lets_go_cha_is_dele_a2fb5a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatgroupmember',
            index=models.Index(fields=['chat_group'], name='lets_go_cha_chat_gr_f28347_idx'),
        ),
        migrations.AddIndex(
            model_name='chatgroupmember',
            index=models.Index(fields=['user'], name='lets_go_cha_user_id_aec825_idx'),
        ),
        migrations.AddIndex(
            model_name='chatgroupmember',
            index=models.Index(fields=['is_active'], name='lets_go_cha_is_acti_d88668_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatgroupmember',
            unique_together={('chat_group', 'user')},
        ),
        migrations.AddIndex(
            model_name='trippayment',
            index=models.Index(fields=['booking'], name='lets_go_tri_booking_dfb2d4_idx'),
        ),
        migrations.AddIndex(
            model_name='trippayment',
            index=models.Index(fields=['transaction_id'], name='lets_go_tri_transac_204793_idx'),
        ),
        migrations.AddIndex(
            model_name='trippayment',
            index=models.Index(fields=['payment_status'], name='lets_go_tri_payment_f7ceab_idx'),
        ),
        migrations.AddIndex(
            model_name='trippayment',
            index=models.Index(fields=['payment_method'], name='lets_go_tri_payment_ef19ae_idx'),
        ),
        migrations.AddIndex(
            model_name='trippayment',
            index=models.Index(fields=['created_at'], name='lets_go_tri_created_d68fda_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['original_payment'], name='lets_go_pay_origina_8a2a78_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['refund_status'], name='lets_go_pay_refund__614f27_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['requested_at'], name='lets_go_pay_request_578dc1_idx'),
        ),
        migrations.AddIndex(
            model_name='tripvehiclehistory',
            index=models.Index(fields=['trip'], name='lets_go_tri_trip_id_ce1270_idx'),
        ),
        migrations.AddIndex(
            model_name='tripvehiclehistory',
            index=models.Index(fields=['vehicle'], name='lets_go_tri_vehicle_dc90a8_idx'),
        ),
    ]
